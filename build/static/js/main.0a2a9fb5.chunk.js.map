{"version":3,"sources":["InfoBox.js","Util.js","Map.js","Table.js","App.js","serviceWorker.js","index.js"],"names":["InfoBox","title","cases","total","Card","className","CardContent","Typography","color","casesTypeColors","hex","multiplier","recovered","deaths","sortData","data","sortedData","sort","a","b","Map","countries","casesType","center","zoom","TileLayer","url","attribution","map","country","Circle","countryInfo","lat","long","fillOpacity","fillColor","radius","Math","sqrt","Popup","style","backgroundImage","flag","showDataOnMap","Table","App","useState","setCountriers","setCountry","setCoutryInfo","tableData","setTableData","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","useEffect","fetch","then","response","json","name","value","iso2","getCountriesData","onCountryChange","event","countryCode","target","FormControl","Select","variant","onChange","MenuItem","todayCases","todayRecovered","todayDeaths","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0a2a9fb5.chunk.js","sourcesContent":["import React from 'react'\nimport {Card, CardContent, Typography} from \"@material-ui/core\"\n\nfunction InfoBox({title, cases, total}) {\n    return (\n      <Card className='InfoBox'>\n          <CardContent>\n              <Typography className='InfoBox__title' color='textSecondary'>\n                  {title}\n              </Typography>\n\n              <h2 className='InfoBox__cases'>{cases}</h2>\n\n              <Typography className='InfoBox__total' color='textSecondary'>\n                  {total}Total\n              </Typography>\n          </CardContent>\n      </Card>      \n    )\n}\n\nexport default InfoBox\n","import React from 'react';\nimport {Circle, Popup} from \"react-leaflet\";\n  \nconst casesTypeColors = {\n    cases:{\n        hex: \"#CC1034\",\n        multiplier: 800,\n    },\n    recovered:{\n        hex:\"#7dd71d\",\n        multiplier: 1200,\n    },\n    deaths:{\n        hex: \"#fb4443\",\n        multiplier: 2000,\n    },\n};\n\nexport const sortData=(data) => {\n    const sortedData=[...data];\n\n    sortedData.sort((a,b)=>{\n        if(a.cases > b.cases){\n            return-1;\n        }\n        else{\n            return 1;\n        }\n    })\n    return sortedData;\n};\n\nexport const showDataOnMap = (data, casesType = \"cases\") => (\n    data.map(country => (\n        <Circle \n            center={[country.countryInfo.lat,country.countryInfo.long]}\n            fillOpacity={0.4}\n            color={casesTypeColors[casesType].hex}\n            fillColor={casesTypeColors[casesType].hex}\n            radius={\n                Math.sqrt(country[casesType])*casesTypeColors[casesType].multiplier\n            }\n        >   \n            <Popup>\n                <div className='info-container'>\n                <div \n                className='info-flag'\n                style={{backgroundImage: `url(${country.countryInfo.flag})`}}\n                />\n                <div>{country.country}</div>\n                <div>Total Cases:{country.cases}</div>\n                <div>Total Recovered: {country.recovered}</div>\n                <div>Total Deaths: {country.deaths}</div>\n                </div>\n            </Popup>\n        </Circle>\n    ))\n)","import React from 'react';\nimport { Map as LeafletMap, TileLayer } from \"react-leaflet\";\nimport \"./Map.css\";\nimport { showDataOnMap } from './Util';\n\n\nfunction Map({countries,casesType,center, zoom}) {\n    return (\n        <div className='map'>\n            <LeafletMap center={center} zoom={zoom}>\n                <TileLayer\n                    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                    attribution='&copy; <a href=\"https://osm.org/copyright\">OpenStreet<a/> contributors'\n                />\n                {showDataOnMap(countries, casesType)}\n            </LeafletMap>\n        </div>\n    )\n}\n\nexport default Map;\n","import React from 'react'\nimport './Table.css'\n\nfunction Table({countries}) {\n    return (\n        <div className='table'>\n            {countries.map(({ country, cases })=>(\n                <tr>\n                    <td>{country}</td>\n                    <td>{cases}</td>\n                </tr>\n            ))}\n        </div>\n    )\n}\n\nexport default Table\n","import React, { useState, useEffect } from 'react';\nimport { MenuItem, FormControl, Select, Card, CardContent,} from \"@material-ui/core\";\nimport InfoBox from './InfoBox'\nimport Map from './Map';\nimport Table from './Table';\nimport {sortData} from './Util';\nimport \"leaflet/dist/leaflet.css\";\nimport './App.css';\n\nfunction App() {\n\n  const [countries, setCountriers] = useState([]);\n  const [country, setCountry] = useState('worldwide');\n  const [countryInfo, setCoutryInfo] = useState({});\n  const [tableData, setTableData] = useState([])\n  const [mapCenter, setMapCenter] = \n  useState({lat: 34.80746, lng:-40.4796});\n  const [mapZoom, setMapZoom] = useState(3);\n  const [mapCountries, setMapCountries]= useState([]);\n\n  useEffect(()=>{\n      fetch(\"https://disease.sh/v3/covid-19/all\")\n      .then((response)=> response.json())\n      .then((data) =>{\n        setCoutryInfo(data);\n      });\n  }, []);\n\n  useEffect(() => {\n    const getCountriesData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/countries\")\n        .then((response) => response.json())\n        .then((data) => {\n          const countries = data.map((country) => ({\n            name: country.country,\n            value: country.countryInfo.iso2,\n          }));\n\n          const sortedData = sortData(data);\n          setTableData(sortedData);\n          setCountriers(countries);\n          setMapCountries(data);\n\n        });\n    };\n    getCountriesData();\n  }, []);\n\n  const onCountryChange = async (event) => {\n    const countryCode = event.target.value;\n    setCountry(countryCode)\n\n    const url = countryCode===\"worldwide\" ? \n  \"https://disease.sh/v3/covid-19/all\"\n  :`https://disease.sh/v3/covid-19/countries/${countryCode}`;\n\n  await fetch(url)\n    .then(response => response.json())\n    .then(data => {\n      setCountry(countryCode);\n      setCoutryInfo(data);\n\n      setMapCenter([data.countryInfo.lat,data.countryInfo.long]);\n      setMapZoom(4);\n    });\n  };\n\n  return (\n    <div className=\"app\">\n      <div className='app__left'>\n        <div className='app__header'>\n          <h1 >Covid-19 Tracker</h1>\n          <FormControl className='app__dropdown'>\n            <Select variant='outlined' onChange={onCountryChange} value={country}>\n              <MenuItem value='worldwide'>WorldWide</MenuItem>\n              {countries.map((country) => (\n                <MenuItem value={country.value}>{country.name}</MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        </div>\n\n        <div className='app__stats'>\n          <InfoBox  title='Coronavirus cases' cases={countryInfo.todayCases} total={countryInfo.cases} />\n          <InfoBox    title='Recovered' cases={ countryInfo.todayRecovered} total={countryInfo.recovered} />\n          <InfoBox  title='Deaths' cases={countryInfo.todayDeaths} total={countryInfo.deaths} />\n        </div>\n\n        <Map  countries={mapCountries} center={mapCenter} zoom={mapZoom}/>\n      </div>\n\n      <Card className='app__right'>\n        <CardContent >\n          <h3>Live cases by Country</h3>\n          <Table countries={tableData} />\n          {/* Graph */}\n        </CardContent>\n      </Card>\n    </div>  \n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}